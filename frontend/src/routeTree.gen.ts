/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedRegistrationImport } from './routes/_authenticated/registration'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedBadgeImport } from './routes/_authenticated/badge'
import { Route as AuthenticatedAnnouncementsImport } from './routes/_authenticated/announcements'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRegistrationRoute = AuthenticatedRegistrationImport.update({
  path: '/registration',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedBadgeRoute = AuthenticatedBadgeImport.update({
  path: '/badge',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAnnouncementsRoute = AuthenticatedAnnouncementsImport.update(
  {
    path: '/announcements',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/announcements': {
      id: '/_authenticated/announcements'
      path: '/announcements'
      fullPath: '/announcements'
      preLoaderRoute: typeof AuthenticatedAnnouncementsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/badge': {
      id: '/_authenticated/badge'
      path: '/badge'
      fullPath: '/badge'
      preLoaderRoute: typeof AuthenticatedBadgeImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/registration': {
      id: '/_authenticated/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof AuthenticatedRegistrationImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedAnnouncementsRoute: typeof AuthenticatedAnnouncementsRoute
  AuthenticatedBadgeRoute: typeof AuthenticatedBadgeRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedRegistrationRoute: typeof AuthenticatedRegistrationRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAnnouncementsRoute: AuthenticatedAnnouncementsRoute,
  AuthenticatedBadgeRoute: AuthenticatedBadgeRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedRegistrationRoute: AuthenticatedRegistrationRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/announcements': typeof AuthenticatedAnnouncementsRoute
  '/badge': typeof AuthenticatedBadgeRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/registration': typeof AuthenticatedRegistrationRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/announcements': typeof AuthenticatedAnnouncementsRoute
  '/badge': typeof AuthenticatedBadgeRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/registration': typeof AuthenticatedRegistrationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/announcements': typeof AuthenticatedAnnouncementsRoute
  '/_authenticated/badge': typeof AuthenticatedBadgeRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/registration': typeof AuthenticatedRegistrationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/announcements'
    | '/badge'
    | '/dashboard'
    | '/registration'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/announcements' | '/badge' | '/dashboard' | '/registration'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/announcements'
    | '/_authenticated/badge'
    | '/_authenticated/dashboard'
    | '/_authenticated/registration'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/announcements",
        "/_authenticated/badge",
        "/_authenticated/dashboard",
        "/_authenticated/registration"
      ]
    },
    "/_authenticated/announcements": {
      "filePath": "_authenticated/announcements.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/badge": {
      "filePath": "_authenticated/badge.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/registration": {
      "filePath": "_authenticated/registration.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
